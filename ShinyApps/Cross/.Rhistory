goals8 <- mutate(goals8,Completions=sum(goal8Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
goals2 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal2Completions"))
goals2 <- mutate(goals2,Completions=sum(goal2Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
DT::datatable(goals2)
DT::datatable(goals8)
goals8 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal8Completions"))
goals8 <- mutate(goals8,Completions=sum(goal8Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
goals2 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal2Completions"))
goals2 <- mutate(goals2,Completions=sum(goal2Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
DT::datatable(goals8)
DT::datatable(goals2)
goals8 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal8Completions"))
goals8 <- mutate(goals8,Completions=sum(goal8Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
goals1 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal1Completions"))
goals1 <- mutate(goals1,Completions=sum(goal1Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
DT::datatable(goals1)
DT::datatable(goals8)
for(i in 1:10){print(i)}
goalsi <- mutate(goalsi,Completions=sum(goal8Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
goalsi <- mutate(goals[i],Completions=sum(goal[i]Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
goals[i] <- mutate(goals[i],Completions=sum(goal[i]Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
for(i in 1:10){"sh[i]t"}
for(i in 1:10){"sh[i]t"}
for(i in 1:10){print("sh[i]t")}
for(i in 1:10){print("sh(i)t")}
goals[i] <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goaliCompletions"))
goals8 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal8Completions"))
goals8 <- mutate(goals8,Completions=sum(goal8Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
goals1 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal1Completions"))
goals1 <- mutate(goals1,Completions=sum(goal1Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Bop Bop")
real <-bind_rows(goals1,goals8)
real
library(googleAnalyticsR)
##Google Analytics API flow
###date range determined by input date
ga_auth()
###Organic Traffic
organic_segment <- "gaid::-5"
seg_obj <- segment_ga4("Organic",segment_id = organic_segment)
account_list <- ga_account_list()
ga_id <- account_list[2,'viewId']
boost <- google_analytics(ga_id,
date_range=c("2016-01-01","2017-01-01"),
dimensions=c("date"),
segments = seg_obj,
metrics=c("sessions"))
####Previous Month
prev_month_boost <- google_analytics(ga_id,
date_range=c(as.Date("2016-01-01")-30,as.Date("2017-01-01")-30),
dimensions=c("date"),
segments = seg_obj,
metrics=c("sessions"))
#######################
##Date type input
###floor_date can be used with date aesthetic to toggle by day or week or month
boost$date <- ceiling_date(boost$date,unit="week")
boost <- group_by(boost,date) %>% summarize(sessions=sum(sessions))
prev_month_boost$date <- floor_date(prev_month_boost$date,unit="week")
prev_month_boost <- group_by(prev_month_boost,date) %>% summarize(sessions=sum(sessions))
##Oranic Plot
ggplot(boost,aes(x=date,y=sessions))+
geom_line() + xlim(min(boost$date)+1,max(boost$date)-1)
#geom_line(data=prev_month_boost,aes(x=boost$date,y=prev_month_boost$sessions),color="red")
##Oranic Plot
ggplot(boost,aes(x=date,y=sessions))+
geom_line() + xlim(min(boost$date)+1,max(boost$date)-1) +
geom_line(data=prev_month_boost,aes(x=boost$date,y=prev_month_boost$sessions),color="red")
boost$date
length(boost$date)
length(boost$date)
length(prev_month_boost$date)
boost
boost[1:length(prev_month_boost$date)]
boost[1:length(prev_month_boost$date),]
library(googleAnalyticsR)
##Google Analytics API flow
###date range determined by input date
ga_auth()
###Organic Traffic
organic_segment <- "gaid::-5"
seg_obj <- segment_ga4("Organic",segment_id = organic_segment)
account_list <- ga_account_list()
ga_id <- account_list[2,'viewId']
boost <- google_analytics(ga_id,
date_range=c("2016-01-01","2017-01-01"),
dimensions=c("date"),
segments = seg_obj,
metrics=c("sessions"))
####Previous Month
prev_month_boost <- google_analytics(ga_id,
date_range=c(as.Date("2016-01-01")-30,as.Date("2017-01-01")-30),
dimensions=c("date"),
segments = seg_obj,
metrics=c("sessions"))
#######################
##Date type input
###floor_date can be used with date aesthetic to toggle by day or week or month
boost$date <- ceiling_date(boost$date,unit="week")
boost <- group_by(boost,date) %>% summarize(sessions=sum(sessions))
prev_month_boost$date <- floor_date(prev_month_boost$date,unit="week")
prev_month_boost <- group_by(prev_month_boost,date) %>% summarize(sessions=sum(sessions))
boost <- boost[1:length(prev_month_boost$date),]
##Oranic Plot
ggplot(boost,aes(x=date,y=sessions))+
geom_line() + xlim(min(boost$date)+1,max(boost$date)-1) +
geom_line(data=prev_month_boost,aes(x=boost$date,y=prev_month_boost$sessions),color="red")
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
isolate(pastgooals)
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
isolate(pastgooals())
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
fun
goals
goals <- goals
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
library(httr)
github <- function(path) {
url <- modify_url("https://api.github.com",path=path)
}
resp <- github_api("/repos/hadley/httr")
github_api <- function(path) {
url <- modify_url("https://api.github.com",path=path)
}
resp <- github_api("/repos/hadley/httr")
resp
library(httr)
github_api <- function(path) {
url <- modify_url("https://api.github.com",path=path)
}
resp <- github_api("/repos/hadley/httr")
resp
GET(url)
github_api <- function(path) {
url <- modify_url("https://api.github.com",path=path)
GET(url)
}
resp <- github_api("/repos/hadley/httr")
resp
?modify_url
url
GET("https://api.github.com/repos/hadley/httr")
github_api <- function(path) {
url <- modify_url("https://api.github.com", path = path)
resp <- GET(url)
if (http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
}
github_api("/repos/hadley/httr")
GET("https://api.hubapi.com/analytics/v2/reports/sessions/daily)
GET("https://api.hubapi.com/analytics/v2/reports/sessions/daily")
GET("https://api.hubapi.com/analytics/v2/reports/sessions/daily?hapikey=caf5bed9-a0c3-4b4a-ad9e-b7dcdbc1126d&start=20180101&end=20180301")
GET(https://app.hubspot.com/oauth/authorize?
client_id=764d615f-457b-4fb5-afe2-bb9324623df3&scope=business-intelligence&
redirect_uri=https://www.alloymagnetic.com/)
GET(https://app.hubspot.com/oauth/authorize?
client_id=764d615f-457b-4fb5-afe2-bb9324623df3&scope=business-intelligence&
redirect_uri=https://www.alloymagnetic.com/)
GET(https://app.hubspot.com/oauth/authorize?client_id=764d615f-457b-4fb5-afe2-bb9324623df3&scope=business-intelligence&redirect_uri=https://www.alloymagnetic.com/)
GET("https://app.hubspot.com/oauth/authorize?client_id=764d615f-457b-4fb5-afe2-bb9324623df3&scope=business-intelligence&redirect_uri=https://www.alloymagnetic.com/")
GET("https://app.hubspot.com/oauth/authorize?client_id=764d615f-457b-4fb5-afe2-bb9324623df3&scope=business-intelligence&redirect_uri=http://127.0.0.1")
browseURL("https://app.hubspot.com/oauth/authorize?client_id=764d615f-457b-4fb5-afe2-bb9324623df3&scope=business-intelligence&redirect_uri=http://127.0.0.1")
runApp('ShinyApps/Cross')
browseURL("https://app.hubspot.com/oauth/authorize?client_id=764d615f-457b-4fb5-afe2-bb9324623df3&scope=business-intelligence&redirect_uri=https://alloymagnetic.com")
browseURL("https://app.hubspot.com/oauth/authorize?client_id=764d615f-457b-4fb5-afe2-bb9324623df3&scope=business-intelligence&redirect_uri=https://alloymagnetic.com")
browseURL("https://app.hubspot.com/oauth/authorize?client_id=764d615f-457b-4fb5-afe2-bb9324623df3&scope=business-intelligence&redirect_uri=https://alloymagnetic.com")
browseURL("https://app.hubspot.com/oauth/authorize?client_id=764d615f-457b-4fb5-afe2-bb9324623df3&scope=business-intelligence&redirect_uri=https://alloymagnetic.com")
browseURL("https://app.hubspot.com/oauth/authorize?client_id=764d615f-457b-4fb5-afe2-bb9324623df3&scope=business-intelligence&redirect_uri=https://alloymagnetic.com")
browseURL("https://app.hubspot.com/oauth/authorize?client_id=764d615f-457b-4fb5-afe2-bb9324623df3&scope=business-intelligence&redirect_uri=https://alloymagnetic.com")
runApp('ShinyApps/Cross')
?oauth1.0_token()
?oauth2.0_token()
hub_end <- oauth_endpoint(NULL,"https://app.hubspot.com/oauth/authorize?client_id=764d615f-457b-4fb5-afe2-bb9324623df3&scope=business-intelligence&redirect_uri=https://alloymagnetic.com","https://alloymagnetic.com")
hub_app <- oauth_app("hubspot",secret = af41ad37-56ee-4ee5-97bc-1ff203d148a3)
hub_app <- oauth_app("hubspot",secret = "af41ad37-56ee-4ee5-97bc-1ff203d148a3")
hub_app <- oauth_app("hubspot",key=180938,secret = "af41ad37-56ee-4ee5-97bc-1ff203d148a3")
oauth2.0_token(hub_end,hub_app)
oauth2.0_token(hub_end,hub_app)
oauth2.0_token(hub_end,hub_app)
oauth2.0_token(hub_end,hub_app)
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
quit()
shiny::runApp('ShinyApps/Cross')
library(googleAnalyticsR)
##Google Analytics API flow
###date range determined by input date
ga_auth()
###Organic Traffic
organic_segment <- "gaid::-5"
seg_obj <- segment_ga4("Organic",segment_id = organic_segment)
account_list <- ga_account_list()
ga_id <- account_list[2,'viewId']
boost <- google_analytics(ga_id,
date_range=c("2016-01-01","2017-01-01"),
dimensions=c("date"),
segments = seg_obj,
metrics=c("sessions"))
####Previous Month
prev_month_boost <- google_analytics(ga_id,
date_range=c(as.Date("2016-01-01")-30,as.Date("2017-01-01")-30),
dimensions=c("date"),
segments = seg_obj,
metrics=c("sessions"))
#######################
##Date type input
###floor_date can be used with date aesthetic to toggle by day or week or month
boost$date <- ceiling_date(boost$date,unit="week")
boost <- group_by(boost,date) %>% summarize(sessions=sum(sessions))
prev_month_boost$date <- floor_date(prev_month_boost$date,unit="week")
prev_month_boost <- group_by(prev_month_boost,date) %>% summarize(sessions=sum(sessions))
boost <- boost[1:length(prev_month_boost$date),]
##Oranic Plot
ggplot(boost,aes(x=date,y=sessions))+
geom_line() + xlim(min(boost$date)+1,max(boost$date)-1) +
geom_line(data=prev_month_boost,aes(x=boost$date,y=prev_month_boost$sessions),color="red")
goals8 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal8Completions"))
goals8 <- mutate(goals8,Completions=sum(goal8Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
goals1 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal1Completions"))
goals1 <- mutate(goals1,Completions=sum(goal1Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Bop Bop")
real <-bind_rows(goals1,goals8)
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
?shiny::hr()
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
shiny::runApp('ShinyApps/Cross')
shiny::runApp('ShinyApps/Cross')
goals8
goals8 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal8Completions","costPerConversion"))
goals8 <- mutate(goals8,Completions=sum(goal8Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
goals8 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal8Completions","costPerConversion"))
goals8 <- mutate(goals8,Completions=sum(goal8Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
goals8 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal8Completions","costPerConversion"))
ga_id <- account_list[2,'viewId']
library(googleAnalyticsR)
##Google Analytics API flow
###date range determined by input date
ga_auth()
###Organic Traffic
organic_segment <- "gaid::-5"
seg_obj <- segment_ga4("Organic",segment_id = organic_segment)
account_list <- ga_account_list()
ga_id <- account_list[2,'viewId']
boost <- google_analytics(ga_id,
date_range=c("2016-01-01","2017-01-01"),
dimensions=c("date"),
metrics=c("sessions","costPerConversion"))
####Previous Month
prev_month_boost <- google_analytics(ga_id,
date_range=c(as.Date("2016-01-01")-30,as.Date("2017-01-01")-30),
dimensions=c("date"),
segments = seg_obj,
metrics=c("sessions","costPerConversion"))
#######################
##Date type input
###floor_date can be used with date aesthetic to toggle by day or week or month
boost$date <- ceiling_date(boost$date,unit="mont")
boost <- group_by(boost,date) %>% summarize(sessions=sum(sessions),costPerConversion=mean(costPerConversion))
prev_month_boost$date <- floor_date(prev_month_boost$date,unit="month")
prev_month_boost <- group_by(prev_month_boost,date) %>% summarize(sessions=sum(sessions),costPerConversion=mean(costPerConversion))
boost <- boost[1:length(prev_month_boost$date),]
##Oranic Plot
ggplot(boost,aes(x=date,y=costPerConversion))+
geom_line() + xlim(min(boost$date)+1,max(boost$date)-1) +
geom_line(data=prev_month_boost,aes(x=boost$date,y=prev_month_boost$costPerConversion),color="red")
goals8 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal8Completions","costPerConversion"))
goals8 <- mutate(goals8,Completions=sum(goal8Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Analyze Click")
goals1 <- google_analytics(ga_id,
date_range=c("2018-08-01","2018-09-01"),
dimensions=c("date"),
metrics=c("goal1Completions"))
goals1 <- mutate(goals1,Completions=sum(goal1Completions)) %>% summarize(Completions=max(Completions)) %>% mutate(Goal = "Bop Bop")
real <-bind_rows(goals1,goals8)
real
goals8
boost
##Date type input
###floor_date can be used with date aesthetic to toggle by day or week or month
boost$date <- ceiling_date(boost$date,unit="month")
boost <- group_by(boost,date) %>% summarize(sessions=sum(sessions),costPerConversion=mean(costPerConversion))
boost
runApp('ShinyApps/Cross')
googleAuthR:::gar_gadget()
library(lubridate)
library(dplyr)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(googleAuthR)
gar_set_client(scopes = c("https://wwww.googleapis.com/auth/analytics.readonly"))
getwd()
Sys.getenv()
Sys.setenv(GAR_CLIENT_WEB_JSON="shiny.json")
Sys.getenv()
library(lubridate)
library(dplyr)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(googleAuthR)
gar_set_client(scopes = c("https://wwww.googleapis.com/auth/analytics.readonly"))
options("googleAuthR.scopes.selected" = c("https://wwww.googleapis.com/auth/analytics.readonly"))
gar_auth()
Sys.setenv(GAR_CLIENT_WEB_JSON="/Users/alloymagnetic1/shiny.json")
library(lubridate)
library(dplyr)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(googleAuthR)
gar_set_client(scopes = c("https://wwww.googleapis.com/auth/analytics.readonly"))
options("googleAuthR.scopes.selected" = c("https://wwww.googleapis.com/auth/analytics.readonly"))
gar_auth()
gar_set_client(scopes = c("https://wwww.googleapis.com/auth/analytics.readonly"))
gar_auth()
gar_set_client(scopes = c("https://wwww.googleapis.com/auth/analytics.readonly"))
gar_auth()
?gar_set_client
Sys.getenv()
Sys.setenv(GAR_CLIENT_WEB_JSON="shiny.json")
library(lubridate)
library(dplyr)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(googleAuthR)
gar_set_client(scopes = c("https://wwww.googleapis.com/auth/analytics.readonly"))
gar_auth()
options("googleAuthR.scopes.selected" = c("https://wwww.googleapis.com/auth/analytics.readonly"))
gar_auth()
googleAuthR:::gar_gadget()
gar_set_client(scopes = c("https://wwww.googleapis.com/auth/analytics.readonly"))
Sys.setenv(GAR_CLIENT_WEB_JSON="shiny.json")
Sys.getenv("GAR_CLIENT_WEB_JSON")
gar_set_client(scopes = c("https://wwww.googleapis.com/auth/analytics.readonly"))
googleAuthR:::gar_gadget()
options("googleAuthR.scopes.selected" = c("https://wwww.googleapis.com/auth/analytics.readonly"))
runApp('ShinyApps/Cross')
googleAuthR:::gar_gadget()
runApp('ShinyApps/Cross')
quit()
shiny::runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
Sys.setenv(GAR_CLIENT_WEB_JSON="shiny.json")
runApp('ShinyApps/Cross')
quit()
library(googleAnalyticsR)
accounts <- ga_account_list()
auth()
ga_auth()
accounts <- ga_account_list()
DT::datatable(accounts)
ga_id <- accounts[10,2]
ga_id
ga_id <- accounts[2,10]
ga_id
testing <- google_analytics(ga_id,
date_range = c("2018-05-01","2018-06-01"),
dimensions = "date",
metrics = "sessions"
)
head(testing)
testing <- google_analytics(ga_id,
date_range = c("2018-05-01","2018-06-01"),
dimensions = c("date","landingPagePath"),
metrics = "sessions"
)
head(testing)
testing <- google_analytics(ga_id,
date_range = c("2018-05-01","2018-06-01"),
dimensions = c("date"),
metrics = "sessions",
segments = c(organic,referral)
)
organic <- segment_ga4("Organic",segment_id = gaid::-5)
referral <- segment_ga4("Referral",segment_id = gaid::-8)
testing <- google_analytics(ga_id,
date_range = c("2018-05-01","2018-06-01"),
dimensions = c("date"),
metrics = "sessions",
segments = c(organic,referral)
)
testing <- google_analytics(ga_id,
date_range = c("2018-05-01","2018-06-01"),
dimensions = c("date"),
metrics = "sessions",
segments = organic
)
organic <- segment_ga4("Organic",segment_id = gaid::-5)
referral <- segment_ga4("Referral",segment_id = gaid::-8)
organic <- segment_ga4("Organic",segment_id = "gaid::-5")
referral <- segment_ga4("Referral",segment_id = "gaid::-8")
testing <- google_analytics(ga_id,
date_range = c("2018-05-01","2018-06-01"),
dimensions = c("date"),
metrics = "sessions",
segments = organic
)
testing <- google_analytics(ga_id,
date_range = c("2018-05-01","2018-06-01"),
dimensions = c("date"),
metrics = "sessions",
segments = c(organic,referral)
)
DT::datatable(testing)
shiny::runApp('ShinyApps/Personal/shit')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
options(shiny.port=4169)
runApp('ShinyApps/Cross')
runApp('ShinyApps/Cross')
getwd()
setwd("~/ShinyApps/Cross)
setwd("~/ShinyApps/Cross")
getwd
getwd()
runApp()
googleAuthR:::gar_gadget()
runApp()
options(googleAuthR.scopes.selected = c("https://www.googleapis.com/auth/analytics.readonly"))
runApp()
getwd
getwd()
